name: Release (feature branch)

on:
  push:
    branches-ignore:
      - main
  pull_request: {}

jobs:
  release:
    # only run on all pushes or pull requests from forks
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      matrix:
        package:
          - drizzle-orm
          - drizzle-zod
          - drizzle-typebox
          - drizzle-valibot
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      id-token: write
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: drizzle
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drizzle
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Check preconditions
        id: checks
        shell: bash
        working-directory: ${{ matrix.package }}
        run: |
          old_version="$(jq -r .version package.json)"
          version="$old_version-$(git rev-parse --short HEAD)"
          npm version $version
          tag="${{ github.ref_name }}"
          is_version_published="$(npm view ${{ matrix.package }} versions --json | jq -r '.[] | select(. == "'$version'") | . == "'$version'"')"

          if [[ "$is_version_published" == "true" ]]; then
            echo "\`${{ matrix.package }}@$version\` already published, adding tag \`$tag\`" >> $GITHUB_STEP_SUMMARY
            npm dist-tag add ${{ matrix.package }}@$version $tag
          else
            {
              echo "version=$version"
              echo "tag=$tag"
              echo "has_new_release=true"
            } >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.checks.outputs.has_new_release == 'true'
        run: |
          pnpm build

      - name: Run tests
        if: steps.checks.outputs.has_new_release == 'true'
        env:
          PG_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/drizzle
          MYSQL_CONNECTION_STRING: mysql://root:root@localhost:3306/drizzle
          PLANETSCALE_CONNECTION_STRING: ${{ secrets.PLANETSCALE_CONNECTION_STRING }}
          LIBSQL_URL: file:local.db
        run: |
          if [[ ${{ github.event_name }} != "push" && "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            export SKIP_PLANETSCALE_TESTS=1
          fi
          if [[ "${{ matrix.package }}" == "drizzle-orm" ]]; then
            pnpm test --filter ${{ matrix.package }} --filter integration-tests
          else
            pnpm test --filter ${{ matrix.package }}
          fi

      - name: Pack
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          npm run pack
  
      - name: Run @arethetypeswrong/cli
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          pnpm attw package.tgz

      - name: Publish
        if: github.event_name == 'push' && steps.checks.outputs.has_new_release == 'true'
        run: |
          tag="${{ steps.checks.outputs.tag }}"
          version="${{ steps.checks.outputs.version }}"

          echo "Publishing ${{ matrix.package }}@$tag using version $version"
          npm run publish -- --tag $tag

          echo "npm: \`${{ matrix.package }}@$tag | ${{ matrix.package }}@$version\`" >> $GITHUB_STEP_SUMMARY

          # Post release message to Discord
          # curl -X POST -H "Content-Type: application/json" -d "{\"embeds\": [{\"title\": \"New \`${{ matrix.package }}\` release! ðŸŽ‰\", \"url\": \"https://www.npmjs.com/package/${{ matrix.package }}/v/$version\", \"color\": \"12907856\", \"fields\": [{\"name\": \"Version\", \"value\": \"\`$version\`\"}, {\"name\": \"Tag\", \"value\": \"\`$tag\`\"}]}]}" ${{ secrets.DISCORD_DEV_RELEASE_WEBHOOK_URL }}
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
