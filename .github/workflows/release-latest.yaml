name: Release (latest)

on: workflow_dispatch

jobs:
  release:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        package:
          - drizzle-orm
          - drizzle-zod
          - drizzle-typebox
          - drizzle-valibot
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: drizzle
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drizzle
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Check preconditions
        id: checks
        shell: bash
        working-directory: ${{ matrix.package }}
        run: |
          latest="$(npm view --json ${{ matrix.package }} dist-tags.latest | jq -r)"
          version="$(jq -r .version package.json)"
          is_version_published="$(npm view ${{ matrix.package }} versions --json | jq -r '.[] | select(. == "'$version'") | . == "'$version'"')"

          if [[ "$is_version_published" == "true" ]]; then
            echo "\`${{ matrix.package }}@$version\` already published, adding tag \`latest\`" >> $GITHUB_STEP_SUMMARY
            npm dist-tag add ${{ matrix.package }}@$version latest
          elif [[ "$latest" != "$version" ]]; then
            echo "Latest:  $latest"
            echo "Current: $version"

            changelogPath=$(node -e "console.log(require('path').resolve('..', 'changelogs', '${{ matrix.package }}', '$version.md'))")
            if [[ ! -f "$changelogPath" ]]; then
              echo "::error::Changelog for version $version not found: $changelogPath"
              exit 1
            fi

            {
              echo "version=$version"
              echo "has_new_release=true"
              echo "changelog_path=$changelogPath"
            } >> $GITHUB_OUTPUT
          else
            echo "Already up to date: $version"
            echo "\`$version\` is already latest on NPM" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Build
        if: steps.checks.outputs.has_new_release == 'true'
        run: |
          pnpm build

      - name: Run tests
        if: steps.checks.outputs.has_new_release == 'true'
        env:
          PG_CONNECTION_STRING: postgres://postgres:postgres@localhost:5432/drizzle
          MYSQL_CONNECTION_STRING: mysql://root:root@localhost:3306/drizzle
          PLANETSCALE_CONNECTION_STRING: ${{ secrets.PLANETSCALE_CONNECTION_STRING }}
          LIBSQL_URL: file:local.db
        run: |
          if [[ "${{ matrix.package }}" == "drizzle-orm" ]]; then
            pnpm test --filter ${{ matrix.package }} --filter integration-tests
          else
          pnpm test --filter ${{ matrix.package }}
          fi

      - name: Pack
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          npm run pack

      - name: Run @arethetypeswrong/cli
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          pnpm attw package.tgz

      - name: Publish
        if: steps.checks.outputs.has_new_release == 'true'
        working-directory: ${{ matrix.package }}
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          version="${{ steps.checks.outputs.version }}"

          echo "Publishing ${{ matrix.package }}@$version"
          npm run publish

          echo "npm: \`+ ${{ matrix.package }}@$version\`" >> $GITHUB_STEP_SUMMARY

          # Post release message to Discord
          # curl -X POST -H "Content-Type: application/json" -d "{\"embeds\": [{\"title\": \"New \`${{ matrix.package }}\` release! ðŸŽ‰\", \"url\": \"https://www.npmjs.com/package/${{ matrix.package }}\", \"color\": \"12907856\", \"fields\": [{\"name\": \"Tag\", \"value\": \"\`$tag\`\"}]}]}" ${{ secrets.DISCORD_RELEASE_WEBHOOK_URL }}

      - name: Create GitHub release for ORM package
        uses: actions/github-script@v6
        if: matrix.package == 'drizzle-orm' && steps.checks.outputs.has_new_release == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const fs = require("fs");
              const path = require("path");

              const version = "${{ steps.checks.outputs.version }}";
              const changelog = fs.readFileSync("${{ steps.checks.outputs.changelog_path }}", "utf8");

              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `${version}`,
                name: `${version}`,
                body: changelog,
              });

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `${{ matrix.package }}-${version}-dist.tgz`,
                data: fs.readFileSync(path.resolve("${{ matrix.package }}", "package.tgz")),
              });
            } catch (e) {
              core.setFailed(e.message);
            }
