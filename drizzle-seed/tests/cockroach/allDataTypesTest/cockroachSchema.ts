import {
	bit,
	bool,
	char,
	cockroachEnum,
	cockroachSchema,
	date,
	decimal,
	float,
	geometry,
	inet,
	int2,
	int4,
	int8,
	interval,
	jsonb,
	numeric,
	real,
	string,
	time,
	timestamp,
	uuid,
	varchar,
	vector,
} from 'drizzle-orm/cockroach-core';

export const schema = cockroachSchema('seeder_lib_pg');

export const moodEnum = cockroachEnum('mood_enum', ['sad', 'ok', 'happy']);

export const allDataTypes = schema.table('all_data_types', {
	int4: int4('int4'),
	int2: int2('int2'),
	int8: int8('int8', { mode: 'bigint' }),
	int8Number: int8('int8_number', { mode: 'number' }),
	numeric: numeric('numeric'),
	decimal: decimal('decimal'),
	real: real('real'),
	doublePrecision: float('double_precision'),
	boolean: bool('boolean'),
	char: char('char', { length: 256 }),
	varchar: varchar('varchar', { length: 256 }),
	string: string('string'),
	bit: bit('bit', { length: 11 }),
	jsonb: jsonb('jsonb'),
	time: time('time'),
	timestampDate: timestamp('timestamp_date', { mode: 'date' }),
	timestampString: timestamp('timestamp_string', { mode: 'string' }),
	dateString: date('date_string', { mode: 'string' }),
	date: date('date', { mode: 'date' }),
	interval: interval('interval'),
	moodEnum: moodEnum('mood_enum'),
	uuid: uuid('uuid'),
	inet: inet('inet'),
	geometry: geometry('geometry', { type: 'point', mode: 'tuple', srid: 0 }),
	vector: vector('vector', { dimensions: 3 }),
});

export const allArrayDataTypes = schema.table('all_array_data_types', {
	int4Array: int4('int4_array').array(),
	int2Array: int2('int2_array').array(),
	int8Array: int8('int8_array', { mode: 'bigint' }).array(),
	int8NumberArray: int8('int8_number_array', { mode: 'number' }).array(),
	numericArray: numeric('numeric_array').array(),
	decimalArray: decimal('decimal_array').array(),
	realArray: real('real_array').array(),
	doublePrecisionArray: float('double_precision_array').array(),
	booleanArray: bool('boolean_array').array(),
	charArray: char('char_array', { length: 256 }).array(),
	varcharArray: varchar('varchar_array', { length: 256 }).array(),
	stringArray: string('string_array').array(),
	bitArray: bit('bit_array', { length: 11 }).array(),
	timeArray: time('time_array').array(),
	timestampDateArray: timestamp('timestamp_date_array', { mode: 'date' }).array(),
	timestampStringArray: timestamp('timestamp_string_array', { mode: 'string' }).array(),
	dateStringArray: date('date_string_array', { mode: 'string' }).array(),
	dateArray: date('date_array', { mode: 'date' }).array(),
	intervalArray: interval('interval_array').array(),
	moodEnumArray: moodEnum('mood_enum_array').array(),
	uuidArray: uuid('uuid_array').array(),
	inetArray: inet('inet_array').array(),
	geometryArray: geometry('geometry_array', { type: 'point', mode: 'tuple', srid: 0 }).array(1),
});

export const intervals = schema.table('intervals', {
	intervalYear: interval({ fields: 'year' }),
	intervalYearToMonth: interval({ fields: 'year to month' }),
	intervalMonth: interval({ fields: 'month' }),
	intervalDay: interval({ fields: 'day' }),
	intervalDayToHour: interval({ fields: 'day to hour' }),
	intervalDayToMinute: interval({ fields: 'day to minute' }),
	intervalDayToSecond: interval({ fields: 'day to second' }),
	intervalHour: interval({ fields: 'hour' }),
	intervalHourToMinute: interval({ fields: 'hour to minute' }),
	intervalHourToSecond: interval({ fields: 'hour to second' }),
	intervalMinute: interval({ fields: 'minute' }),
	intervalMinuteToSecond: interval({ fields: 'minute to second' }),
	intervalSecond: interval({ fields: 'second' }),
});
