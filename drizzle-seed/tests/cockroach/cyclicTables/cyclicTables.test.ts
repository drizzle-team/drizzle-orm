import type { Container } from 'dockerode';
import { sql } from 'drizzle-orm';
import type { NodeCockroachDatabase } from 'drizzle-orm/cockroach';
import { drizzle } from 'drizzle-orm/cockroach';
import { Client } from 'pg';
import { afterAll, afterEach, beforeAll, expect, test } from 'vitest';
import { reset, seed } from '../../../src/index.ts';
import { createDockerDB } from '../utils.ts';
import * as schema from './cockroachSchema.ts';

let client: Client;
let db: NodeCockroachDatabase;
let cockroachContainer: Container;

beforeAll(async () => {
	const { connectionString, container } = await createDockerDB();
	cockroachContainer = container;

	const sleep = 1000;
	let timeLeft = 40000;
	let connected = false;
	let lastError: unknown | undefined;
	do {
		try {
			client = new Client({ connectionString });
			await client.connect();
			db = drizzle({ client });
			connected = true;
			break;
		} catch (e) {
			lastError = e;
			await new Promise((resolve) => setTimeout(resolve, sleep));
			timeLeft -= sleep;
		}
	} while (timeLeft > 0);
	if (!connected) {
		console.error('Cannot connect to MsSQL');
		await client?.end().catch(console.error);
		await cockroachContainer?.stop().catch(console.error);
		throw lastError;
	}

	db = drizzle({ client });

	await db.execute(
		sql`
			create table model_image
			(
			    id        int4 generated by default as identity
			        primary key,
			    url       varchar not null,
			    caption   varchar,
			    "modelId" int4 not null
			);
		`,
	);

	await db.execute(
		sql`
			create table model
			      (
			          id               int4 generated by default as identity
			              primary key,
			          name             varchar not null,
			          "defaultImageId" int4
			              constraint "model_defaultImageId_model_image_id_fk"
			                  references model_image
			      );
		`,
	);

	await db.execute(
		sql`
			alter table model_image
						    add constraint "model_image_modelId_model_id_fk"
						        foreign key ("modelId") references model;
		`,
	);

	// 3 tables case
	await db.execute(
		sql`
			create table model_image1
			(
			    id        int4 generated by default as identity
			        primary key,
			    url       varchar not null,
			    caption   varchar,
			    "modelId" int4 not null
			);
		`,
	);

	await db.execute(
		sql`
			create table "user"
			(
			    id          int4 generated by default as identity
			        primary key,
			    name        string,
			    "invitedBy" int4
			        constraint "user_invitedBy_user_id_fk"
			            references "user",
			    "imageId"   int4 not null
			        constraint "user_imageId_model_image1_id_fk"
			            references model_image1
			);
		`,
	);

	await db.execute(
		sql`
			create table model1
			(
			    id               int4 generated by default as identity
			        primary key,
			    name             varchar not null,
			    "userId"         int4
			        constraint "model1_userId_user_id_fk"
			            references "user",
			    "defaultImageId" int4
			        constraint "model1_defaultImageId_model_image1_id_fk"
			            references model_image1
			);
		`,
	);

	await db.execute(
		sql`
			alter table model_image1
			 add constraint "model_image1_modelId_model1_id_fk"
			     foreign key ("modelId") references model1;
		`,
	);
});

afterEach(async () => {
	await reset(db, schema);
});

afterAll(async () => {
	await client?.end().catch(console.error);
	await cockroachContainer?.stop().catch(console.error);
});

test('2 cyclic tables test', async () => {
	await seed(db, {
		modelTable: schema.modelTable,
		modelImageTable: schema.modelImageTable,
	});

	const modelTable = await db.select().from(schema.modelTable);
	const modelImageTable = await db.select().from(schema.modelImageTable);

	expect(modelTable.length).toBe(10);
	let predicate = modelTable.every((row) => Object.values(row).every((val) => val !== undefined && val !== null));
	expect(predicate).toBe(true);

	expect(modelImageTable.length).toBe(10);
	predicate = modelImageTable.every((row) => Object.values(row).every((val) => val !== undefined && val !== null));
	expect(predicate).toBe(true);
});

test('3 cyclic tables test', async () => {
	await seed(db, {
		modelTable1: schema.modelTable1,
		modelImageTable1: schema.modelImageTable1,
		user: schema.user,
	});

	const modelTable1 = await db.select().from(schema.modelTable1);
	const modelImageTable1 = await db.select().from(schema.modelImageTable1);
	const user = await db.select().from(schema.user);

	expect(modelTable1.length).toBe(10);
	let predicate = modelTable1.every((row) => Object.values(row).every((val) => val !== undefined && val !== null));
	expect(predicate).toBe(true);

	expect(modelImageTable1.length).toBe(10);
	predicate = modelImageTable1.every((row) => Object.values(row).every((val) => val !== undefined && val !== null));
	expect(predicate).toBe(true);

	expect(user.length).toBe(10);
	predicate = user.every((row) => Object.values(row).every((val) => val !== undefined && val !== null));
	expect(predicate).toBe(true);
});
