import { cockroachdbTable, int2, int4, int8, text } from 'drizzle-orm/cockroachdb-core';
import { afterAll, beforeAll, beforeEach, expect, test } from 'vitest';
import { diff, prepareTestDatabase, push, TestDatabase } from './mocks';

// @vitest-environment-options {"max-concurrency":1}
let _: TestDatabase;
let db: TestDatabase['db'];

beforeAll(async () => {
	_ = await prepareTestDatabase();
	db = _.db;
});

afterAll(async () => {
	await _.close();
});

beforeEach(async () => {
	await _.clear();
});

test('create table: identity always/by default - no params', async () => {
	const from = {};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
			id1: int8('id1', { mode: 'number' }).generatedByDefaultAsIdentity(),
			id2: int2('id2').generatedByDefaultAsIdentity(),
		}),
	};

	const { sqlStatements: st, next } = await diff(from, to, []);

	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'CREATE TABLE "users" (\n\t"id" int4 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),\n\t"id1" int8 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),\n\t"id2" int2 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1)\n);\n',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('create table: identity always/by default - few params', async () => {
	const from = {};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
			}),
			id1: int8('id1', { mode: 'number' }).generatedByDefaultAsIdentity({
				startWith: 120,
				maxValue: 17000,
			}),
			id2: int2('id2').generatedByDefaultAsIdentity({ cache: 1 }),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'CREATE TABLE "users" (\n\t"id" int4 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 4 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),\n\t"id1" int8 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 17000 START WITH 120 CACHE 1),\n\t"id2" int2 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1)\n);\n',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('create table: identity always/by default - all params', async () => {
	// TODO revise: added id1, id2 columns to users table, like in same test from push.test.ts
	const from = {};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
				minValue: 3,
				maxValue: 1000,
				cache: 200,
			}),
			id1: int8('id1', { mode: 'number' }).generatedByDefaultAsIdentity({
				startWith: 120,
				maxValue: 17000,
				increment: 3,
				cache: 100,
			}),
			id2: int2('id2').generatedByDefaultAsIdentity({ minValue: 1 }),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'CREATE TABLE "users" (\n\t"id" int4 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 4 MINVALUE 3 MAXVALUE 1000 START WITH 3 CACHE 200),\n\t"id1" int8 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 3 MINVALUE 1 MAXVALUE 17000 START WITH 120 CACHE 100),\n\t"id2" int2 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1)\n);\n',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('no diff: identity always/by default - no params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
			id2: int4('id2').generatedAlwaysAsIdentity(),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
			id2: int4('id2').generatedAlwaysAsIdentity(),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0: string[] = [];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('no diff: identity always/by default - few params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				increment: 1,
				startWith: 3,
			}),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				increment: 1,
				startWith: 3,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0: string[] = [];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('no diff: identity always/by default - all params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
				minValue: 3,
				maxValue: 1000,
				cache: 200,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				startWith: 10,
				minValue: 10,
				maxValue: 1000,
				cache: 10,
				increment: 2,
			}),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				increment: 4,
				minValue: 3,
				maxValue: 1000,
				cache: 200,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				startWith: 10,
				minValue: 10,
				maxValue: 1000,
				cache: 10,
				increment: 2,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0: string[] = [];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('drop identity from a column - no params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id'),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		`ALTER TABLE \"users\" ALTER COLUMN \"id\" DROP IDENTITY;`,
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('drop identity from a column - few params', async () => {
	// TODO revise: added id1, id2 columns to users table, like in the same test from push.test.ts
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				startWith: 100,
				increment: 3,
			}),
			id1: int4('id1').generatedByDefaultAsIdentity({
				increment: 4,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				increment: 4,
			}),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id'),
			id1: int4('id1'),
			id2: int4('id2'),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		`ALTER TABLE \"users\" ALTER COLUMN \"id\" DROP IDENTITY;`,
		'ALTER TABLE "users" ALTER COLUMN "id1" DROP IDENTITY;',
		'ALTER TABLE "users" ALTER COLUMN "id2" DROP IDENTITY;',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('drop identity from a column - all params', async () => {
	// TODO revise: added id1, id2 columns to users table, like in the same test from push.test.ts
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				startWith: 100,
				increment: 3,
				cache: 100,
			}),
			id1: int4('id1').generatedByDefaultAsIdentity({
				startWith: 10,
				minValue: 10,
				maxValue: 1000,
				cache: 10,
				increment: 2,
			}),
			id2: int4('id2').generatedAlwaysAsIdentity({
				startWith: 10,
				minValue: 10,
				maxValue: 1000,
				cache: 10,
				increment: 2,
			}),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id'),
			id1: int4('id1'),
			id2: int4('id2'),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		`ALTER TABLE \"users\" ALTER COLUMN \"id\" DROP IDENTITY;`,
		`ALTER TABLE \"users\" ALTER COLUMN \"id1\" DROP IDENTITY;`,
		`ALTER TABLE \"users\" ALTER COLUMN \"id2\" DROP IDENTITY;`,
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('alter identity from a column - no params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({ startWith: 100 }),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'ALTER TABLE "users" ALTER COLUMN "id" SET START WITH 100;',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('alter identity from a column - few params', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({ startWith: 100 }),
		}),
	};

	// TODO revise: added more params, like in same test from push.test.ts
	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				startWith: 100,
				cache: 10,
				increment: 4,
				maxValue: 10000,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'ALTER TABLE "users" ALTER COLUMN "id" SET MAXVALUE 10000;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET INCREMENT BY 4;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET CACHE 10;',
	];

	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('alter identity from a column - by default to always', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity(),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedAlwaysAsIdentity({
				startWith: 100,
				cache: 10,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'ALTER TABLE "users" ALTER COLUMN "id" SET GENERATED ALWAYS;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET START WITH 100;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET CACHE 10;',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('alter identity from a column - always to by default', async () => {
	const from = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedAlwaysAsIdentity(),
		}),
	};

	const to = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({
				startWith: 100,
				cache: 10,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(from, to, []);

	await push({ db, to: from });
	const { sqlStatements: pst } = await push({
		db,
		to,
	});

	const st0 = [
		'ALTER TABLE "users" ALTER COLUMN "id" SET GENERATED BY DEFAULT;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET START WITH 100;',
		'ALTER TABLE "users" ALTER COLUMN "id" SET CACHE 10;',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('add column with identity - few params', async () => {
	const schema1 = {
		users: cockroachdbTable('users', {
			email: text('email'),
		}),
	};

	const schema2 = {
		users: cockroachdbTable('users', {
			email: text('email'),
			id: int4('id').generatedByDefaultAsIdentity({}),
			id1: int4('id1').generatedAlwaysAsIdentity({
				increment: 4,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(schema1, schema2, []);

	await push({ db, to: schema1 });
	const { sqlStatements: pst } = await push({ db, to: schema2 });

	const st0: string[] = [
		'ALTER TABLE "users" ADD COLUMN "id" int4 GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1);',
		'ALTER TABLE "users" ADD COLUMN "id1" int4 GENERATED ALWAYS AS IDENTITY (INCREMENT BY 4 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1);',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});

test('add identity to column - few params', async () => {
	const schema1 = {
		users: cockroachdbTable('users', {
			id: int4('id').notNull(),
			id1: int4('id1').notNull(),
		}),
	};

	const schema2 = {
		users: cockroachdbTable('users', {
			id: int4('id').generatedByDefaultAsIdentity({}),
			id1: int4('id1').generatedAlwaysAsIdentity({
				increment: 4,
			}),
		}),
	};

	const { sqlStatements: st } = await diff(schema1, schema2, []);

	await push({ db, to: schema1 });
	const { sqlStatements: pst } = await push({ db, to: schema2 });

	const st0: string[] = [
		'ALTER TABLE "users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1);',
		'ALTER TABLE "users" ALTER COLUMN "id1" ADD GENERATED ALWAYS AS IDENTITY (INCREMENT BY 4 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1);',
	];
	expect(st).toStrictEqual(st0);
	expect(pst).toStrictEqual(st0);
});
