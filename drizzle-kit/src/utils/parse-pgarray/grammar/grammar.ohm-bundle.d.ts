// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Namespace,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface PGArrayExpressionActionDict<T> extends BaseActionDict<T> {
  Array?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ArrayItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  stringLiteral?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  quotelessString?: (this: NonterminalNode, arg0: IterationNode) => T;
  escapedSymbol?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  nullLiteral?: (this: NonterminalNode, arg0: TerminalNode) => T;
  forbiddenSymbolForQuoteless?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
}

export interface PGArrayExpressionSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: PGArrayExpressionActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: PGArrayExpressionActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: PGArrayExpressionActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: PGArrayExpressionActionDict<T>): this;
}

export interface PGArrayExpressionGrammar extends Grammar {
  createSemantics(): PGArrayExpressionSemantics;
  extendSemantics(superSemantics: PGArrayExpressionSemantics): PGArrayExpressionSemantics;
}

export interface PGArrayLiteralActionDict<T> extends BaseActionDict<T> {
  Array?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ArrayItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  stringLiteral?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  quotelessString?: (this: NonterminalNode, arg0: IterationNode) => T;
  escapedSymbol?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  nullLiteral?: (this: NonterminalNode, arg0: TerminalNode) => T;
  forbiddenSymbolForQuoteless?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
}

export interface PGArrayLiteralSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: PGArrayLiteralActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: PGArrayLiteralActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: PGArrayLiteralActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: PGArrayLiteralActionDict<T>): this;
}

export interface PGArrayLiteralGrammar extends Grammar {
  createSemantics(): PGArrayLiteralSemantics;
  extendSemantics(superSemantics: PGArrayLiteralSemantics): PGArrayLiteralSemantics;
}

declare const ns: {
  PGArrayExpression: PGArrayExpressionGrammar;
  PGArrayLiteral: PGArrayLiteralGrammar;
};
export default ns;

